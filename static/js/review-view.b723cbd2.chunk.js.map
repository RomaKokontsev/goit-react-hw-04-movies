{"version":3,"sources":["views/ReviewsView.js"],"names":["ReviewsView","movieId","useState","reviewsList","setReviewsList","useEffect","fetchGetMovieReviews","then","data","results","length","map","review","author","content","id"],"mappings":"0NAIe,SAASA,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACpC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAQA,OANAC,qBAAU,WACRC,YAAqBL,GAASM,MAAK,SAACC,GAClCJ,EAAeI,EAAKC,cAErB,CAACR,IAGF,mCACGE,EAAYO,OAAS,EACpB,mCACE,6BACGP,EAAYQ,KAAI,SAACC,GAAD,OACf,+BACE,6BAAKA,EAAOC,SACZ,4BAAID,EAAOE,YAFJF,EAAOG,WAQtB","file":"static/js/review-view.b723cbd2.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { fetchGetMovieReviews } from \"../services/moviesApi\";\n\nexport default function ReviewsView({ movieId }) {\n  const [reviewsList, setReviewsList] = useState([]);\n\n  useEffect(() => {\n    fetchGetMovieReviews(movieId).then((data) => {\n      setReviewsList(data.results);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {reviewsList.length > 0 ? (\n        <>\n          <ul>\n            {reviewsList.map((review) => (\n              <li key={review.id}>\n                <h4>{review.author}</h4>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <p> No results</p>\n      )}\n    </>\n  );\n}\n\nReviewsView.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n"],"sourceRoot":""}